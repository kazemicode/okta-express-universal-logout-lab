{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "3 - Allow only authorized access to the endpoint",
  "nextTour": "4 - Test token revocation endpoint with Okta",
  "steps": [
    {
      "file": "app.js",
      "description": "## Signed JWT validation\n\nThe cURL request from previous step should result in a 204 response confirming that a user named Trinity exists in the database. Sure, we got a successful response, but this endpoint isn't secure! We've made it available for anyone to access. Let's fix this by adding authentication to protect this endpoint and establish trust between our server and any external service making a request to this route.\n\nUsing the OAuth 2.0 Authorization method Private key JWT, we'll need to verify that the tokens from Okta are valid. Okta has a library that can handle this for us, [Okta JWT Verifier library](https://www.npmjs.com/package/@okta/jwt-verifier). We've already installed this library for you.",
      "line": 48,
      "selection": {
        "start": {
          "line": 50,
          "character": 1
        },
        "end": {
          "line": 53,
          "character": 25
        }
      }
    },
    {
      "file": "app.js",
      "description": "## Instantiate the OktaJwtVerifier\n\n*Notice that `app.js` has been opened here for you.*\n\nTo do instantiate the `OktaJwtVerifier`, you'll need to include the issuer (the authorization server from which we expect the signed JWT to originate) and the public keys endpoint so the library can cryptographically match the signed token with the keys used to sign it. \n\n\n**We've included these endpoints for you. Uncomment the `oktaJwtVerifier` object. Your Okta org URL is pulled from the environment variables you previously set.**\n\nNote: Using Okta as the IdP, you can find the issuer and keys endpoint information at the [Okta Org Authorization Server's metadata endpoint](https://developer.okta.com/docs/concepts/auth-servers/#org-authorization-server). \n\nIt will look something like this `https://{yourOktaDomain}/.well-known/openid-configuration` and you can visit it directly from the browser. \n\n",
      "line": 53,
      "selection": {
        "start": {
          "line": 50,
          "character": 1
        },
        "end": {
          "line": 53,
          "character": 25
        }
      }
    },
    {
      "file": "app.js",
      "description": "## Add the custom token validating middleware\n\n*Notice that `app.js` has been opened here for you.*\n\nNext, create a custom middleware called, `tokenValidator`, to get the signed JWT from the `POST` request body and validate it with the Okta JWT Verifier. \n\nTo try this on your own, review the [`OktaJwtVerifier` library](https://www.npmjs.com/package/@okta/jwt-verifier) to guide you. \n\nOtherwise, you can click the **Insert Code** link (only click once) below to insert the code snippet that will do the job:\n\n```js\nconst tokenValidator = async function (req, res, next) {\n  if (!access_token) {\n    return res.sendStatus(401);\n  }\n\n  const expectedAud = `${ORG_URL}`\n\n  try {\n    const verifiedJwt = await oktaJwtVerifier.verifyAccessToken(\n      access_token,\n      expectedAud\n    );\n    console.log(verifiedJwt.claims);\n  } catch (err) {\n    console.log(err);\n    return res.sendStatus(401);\n  }\n  \n  next();\n};\n```\n\nClick [here](command:workbench.action.files.save) to save your changes to this file.",
      "line": 56
    },
    {
      "file": "app.js",
      "description": "## Pass middleware to the global token revocation endpoint\n\n*Notice that `app.js` has been opened here for you.*\n\nNow we need to pass the `tokenValidator` middleware to the global token revocation endpoint on the line highlighted above. Try this on your own. Otherwise, you can click the **Insert Code** link (only click once) below to insert the code snippet that will do the job:\n\n```js\napp.use('/logout', tokenValidator, universalLogoutRoute);\n```\n\nClick [here](command:workbench.action.files.save) to save your changes to this file.",
      "line": 103,
      "selection": {
        "start": {
          "line": 103,
          "character": 1
        },
        "end": {
          "line": 103,
          "character": 37
        }
      }
    },
    {
      "title": "Relaunch your app",
      "description": "## Relaunch your app\n\n1. Go to the Terminal tab where you initially ran the `npm start` command. Press Ctrl+C to stop its execution.\n\n1. Click [here](command:codetour.sendTextToTerminal?[\"npm start\"]) to re-run your app.\n> This issues the command `npm start` to your Terminal. \n\n1. Click on the PORTS panel within this window.\n\n1. You will see your app running on port 3000 here. Right click on this entry and select **Port visibility** > **Public**.\n\n1. Click the icon of a globe to open your app in a new tab.\n\n1. Click the **Login** button and login using the credentials you set up for **trinity@whiterabbit.fake**."
    },
    {
      "title": "Test Universal Logout from the application",
      "description": "## Test Universal Logout from the application\n\n1. Select the **Logout** button.\n> Recall that this route uses `universalLogout`, which calls our Universal Logout endpoint.\n1. Trinity's sessions are now ended."
    }
  ]
}