{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2 - Build a Universal Logout endpoint to find a user and their active sessions",
  "nextTour": "3 - Allow only authorized access to the endpoint",
  "steps": [
    {
      "file": "universalLogout.js",
      "description": "## Global token revocation\n\n*Notice that `universalLogout.js` has been opened here for you.*\n\nDuring Universal Logout, we will need to revoke all tokens and sessions for a specified user. Notice we are building the [`/global-token-revocation`](https://developer.okta.com/docs/api/openapi/okta-oauth/oauth/tag/GlobalTokenRevocation/) endpoint here.\n\nThis will initiate the global revocation of all tokens and sessions for a specified user enabling external Identity Providers to trigger a comprehensive sign-out process. This includes executing IdP-initiated sign-out flows across all applications that are using global token revocation and requiring users to re-authenticate to access protected resources.\n\nAs you might guess, we will need the user object as part of this process. In the next step, we will add code to get a user by email.",
      "line": 6
    },
    {
      "file": "universalLogout.js",
      "description": "## Find User by email\n\n*Notice that `universalLogout.js` has been opened here for you.*\n\nWe will need to add code on the highlighted line above to find a user by email based on information received from the request body. \n\nIf you can do this on your own, try it! Otherwise, you can click the **Insert Code** link (only click once) below to insert the code snippet that will do the job:\n\n```js\nconst user = req.body['sub_id']['email']\n```\n\nClick [here](command:workbench.action.files.save) to save your changes to this file.",
      "line": 16,
      "selection": {
        "start": {
          "line": 16,
          "character": 1
        },
        "end": {
          "line": 16,
          "character": 1
        }
      }
    },
    {
      "file": "universalLogout.js",
      "description": "## Associate the user ID with the session object\n\n*Notice that `universalLogout.js` has been opened here for you.*\n\nNow that we have the user object, we can associate the user's ID with the session object. \n\nIn the lines above, we access a userâ€™s session in the session store from the `express-session` library. We specifically need the `MemoryStore` object, which has already been imported on Line 3 where we import `sessionStore.js`. \n\nWe then build list of session IDs associated with the user (`sids`), which we'll use in the next step to end all of the user's active sessions.",
      "line": 30,
      "selection": {
        "start": {
          "line": 23,
          "character": 1
        },
        "end": {
          "line": 30,
          "character": 6
        }
      }
    },
    {
      "file": "universalLogout.js",
      "description": "## End user's active sessions\n\nNext, we will need to loop through the list of session ids associated with the user (`sids`) and delete all active sessions associated with the user. \n\nFeel free to try this on your own. Otherwise, you can click the **Insert Code** link (only click once) below to insert the code snippet that will do the job:\n\n```js\nfor (const sid of sids) {\n    store.destroy(sid);\n  }\n```\n\nClick [here](command:workbench.action.files.save) to save your changes to this file.",
      "line": 33
    },
    {
      "title": "Test with cURL",
      "description": "## Test with cURL\n\n1. Click [here](command:codetour.sendTextToTerminal?[\"npm start\"]) to run your app.\n> This issues the command `npm start` to your Terminal. You can click on your Terminal and press Ctrl+C to stop this process.\n\n    Now test your code by making a cURL request. As per the [Global Token Revocation Specification](https://datatracker.ietf.org/doc/html/draft-parecki-oauth-global-token-revocation#name-revocation-request), we are expecting an external request to end a user's session based on the email used to sign in to the app through their IdP. The request will look like the following:\n\n    ```\n    POST /global-token-revocation\\\n    Host: example.com\\\n    Content-Type: application/json\\\n    {\\\n    \"sub_id\": {\\\n        \"format\": \"email\",\\\n        \"email\": \"user@example.com\"\\\n    }\\\n    }\n    ```\n\n1. Open a new terminal window, be sure to set the [port to public within Codespaces](https://docs.github.com/en/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace) and send the following cURL request to check your code:\n\n    ```\n    curl --request POST \\\n    --url http://{yourCodespaceUrl}-3000.app.github.dev/global-token-revocation/global-token-revocation \\\n    --header 'Content-Type: application/json' \\\n    --data '{\n    \"sub_id\": {\n        \"format\": \"email\",\n        \"email\": \"trinity@whiterabbit.fake\"\n    }\n    }'\n    ```\n\n    This request will result in a 204 response confirming that a user named Trinity exists and her sessions have been deleted. And sure, we got a successful response, but what is wrong here? This endpoint isn't secure; we've made it available for anyone to access. Let's fix this by adding authentication to protect this endpoint and establish trust between our server and any external service making a request to this route.",
      "selection": {
        "start": {
          "line": 21,
          "character": 1
        },
        "end": {
          "line": 34,
          "character": 426
        }
      }
    }
  ]
}